(texmacs-module (git-utils))

(tm-define (buffer-status name)
           (let* ((name-s (url->string name))
                  (cmd (string-append "git status -s " name-s))
                  (ret (eval-system cmd)))
             ;; (display ret)
             ;; FIXME: why it works for colored text without any handling
             (cond ((string-starts? ret "A ") "A ")
                   ((string-starts? ret "??") "??")
                   ((string-starts? ret " M") " M")
                   ((string-starts? ret "M ") "M ")
                   ((string-starts? ret "MM") "MM")
                   ((string-starts? ret "AM") "AM")
                   (else "others"))))

(tm-define (buffer-staged? name)
           (with ret (buffer-status name)
                 (or (== ret "A ")
                     (== ret "M ")
                     (== ret "MM")
                     (== ret "AM"))))

(tm-define (buffer-unstaged? name)
           (with ret (buffer-status name)
                 (or (== ret "??")
                     (== ret " M")
                     (== ret "MM")
                     (== ret "AM"))))

(tm-define (buffer-histed? name)
           (with ret (buffer-status name)
                 (or (== ret "M ")
                     (== ret "MM")
                     (== ret " M")
                     (== ret "others"))))

(tm-define (git-status)
           (let* ((cmd "git status")
                  (ret (eval-system cmd)))
             (string-split ret #\nl)))

(tm-define (git-commit-message hash)
           (let* ((cmd (string-append "git log -1 " hash))
                  (ret (eval-system cmd)))
             (string-split ret #\nl)))

(tm-define (git-commit-parent hash)
           (let* ((cmd (string-append "git log -2 --pretty=%H " hash " | tail -1"))
                  (ret (eval-system cmd)))
             (string-drop-right ret 1)))

(tm-define (git-commit-diff parent hash)
           (let* ((cmd (string-append "git diff --numstat " parent " " hash))
                  (ret (eval-system cmd)))
             (string-split ret #\nl)))

(tm-define (git-commit message)
           (let* ((cmd (string-append "git commit -m \"" message "\""))
                  (ret (eval-system cmd)))
             ;; (display ret)
             (set-message "git commit" message))
           (git-show-status))

(tm-define (git-show path)
           (let* ((cmd (string-append "git show " path))
                  (ret (eval-system cmd)))
             (display* "\n" cmd "\n" ret "\n")
             ret))

(tm-define (string->commit str name)
           (if (== str "") '()
               (let* ((list1 (string-split str #\|))
                      (list2 (list (string-take (list-ref list1 0) 20)
                                   (list-ref list1 1)
                                   (list-ref list1 2)
                                   ($link (string-append "tmfs://commit/"
                                                         (list-ref list1 3)
                                                         (if (== (string-length name) 0)
                                                             ""
                                                             (string-append "|" name)))
                                          (string-take (list-ref list1 3) 7)))))
                 list2)))


(tm-define (git-log)
           (let* ((cmd "git log --pretty=%ai\"|\"%an\"|\"%s\"|\"%H")
                  (ret1 (eval-system cmd))
                  (ret2 (string-split ret1 #\nl)))
             (define (string->commit-diff str)
                        (string->commit str ""))
             (and (> (length ret2) 0)
                  (== (cAr ret2) "")
                  (map string->commit-diff (cDr ret2)))))


(tm-define (buffer-log name)
           (let* ((name1 (url->string name))
                  (sub (string-append (string-drop-right (eval-system "pwd") 1)
                                      "/"))
                  (name-s (string-replace name1 sub ""))
                  (cmd (string-append "git log --pretty=%ai\"|\"%an\"|\"%s\"|\"%H " name-s))
                  (ret1 (eval-system cmd))
                  (ret2 (string-split ret1 #\nl)))
             (define (string->commit-file str)
               (string->commit str name-s))
             (and (> (length ret2) 0)
                  (== (cAr ret2) "")
                  (map string->commit-file (cDr ret2)))))
