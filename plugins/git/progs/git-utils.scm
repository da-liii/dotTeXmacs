(texmacs-module (git-utils))

(tm-define (buffer-status name)
           (let* ((name-s (url->string name))
                  (cmd (string-append "git status -s " name-s))
                  (ret (eval-system cmd)))
             ;; (display ret)
             ;; FIXME: why it works for colored text without any handling
             (cond ((string-starts? ret "A ") "A ")
                   ((string-starts? ret "??") "??")
                   ((string-starts? ret " M") " M")
                   ((string-starts? ret "M ") "M ")
                   ((string-starts? ret "MM") "MM")
                   ((string-starts? ret "AM") "AM")
                   (else "others"))))

(tm-define (buffer-staged? name)
           (with ret (buffer-status name)
                 (or (== ret "A ")
                     (== ret "M ")
                     (== ret "MM")
                     (== ret "AM"))))

(tm-define (buffer-unstaged? name)
           (with ret (buffer-status name)
                 (or (== ret "??")
                     (== ret " M")
                     (== ret "MM")
                     (== ret "AM"))))

(tm-define (buffer-histed? name)
           (with ret (buffer-status name)
                 (or (== ret "M ")
                     (== ret "MM")
                     (== ret " M")
                     (== ret "others"))))

(tm-define (git-status)
           (let* ((cmd "git status")
                  (ret (eval-system cmd)))
             (string-split ret #\nl)))

(tm-define (string->commit-file str name)
           (if (== str "") ""
               (let* ((list1 (string-split str #\|))
                  (list2 (list (string-take (list-ref list1 0) 20)
                               (string-append (list-ref list1 1) "    ")
                               (list 'hlink (string-take (list-ref list1 3) 7)
                                     (string-append "tmfs://commit/"
                                                    (list-ref list1 3)
                                                    (if (== (string-length name) 0)
                                                        ""
                                                        (string-append "|" name))))
                               (list 'new-line)
                               (string-append (list-ref list1 2)))))
             (cons 'concat list2))))

(tm-define (string->commit-diff str)
           (string->commit-file str ""))

(tm-define (git-log)
           (let* ((cmd "git log --pretty=%ai\"|\"%an\"|\"%s\"|\"%H")
                  (ret1 (eval-system cmd))
                  (ret2 (string-split ret1 #\nl))
                  (ret3 (map string->commit-diff ret2)))
             ret3))

(tm-define (git-commit message)
           (let* ((cmd (string-append "git commit -m \"" message "\""))
                  (ret (eval-system cmd)))
             ;; (display ret)
             (set-message "git commit" message))
           (git-show-status))

(tm-define (buffer-log name)
           (define ret '())
           (let* ((name1 (url->string name))
                  (sub (string-append (string-drop-right (eval-system "pwd") 1)
                                      "/"))
                  (name-s (string-replace name1 sub ""))
                  (cmd (string-append "git log --pretty=%ai\"|\"%an\"|\"%s\"|\"%H " name-s))
                  (ret1 (eval-system cmd))
                  (ret2 (string-split ret1 #\nl)))
             (display* "\n" "The file: " name-s "\n")
             (display* "\n" "PWD: " (eval-system "pwd") "\n")
             (foreach (item ret2)
                      (set! ret (cons (string->commit-file item name-s) ret)))
             (reverse ret)))

(tm-define (git-show path)
           (let* ((cmd (string-append "git show " path))
                  (ret (eval-system cmd)))
             (display* "\n" cmd "\n" ret "\n")
             ret))
